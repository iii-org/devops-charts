apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-dpy
  labels:
    app: {{ .Release.Name }}
  annotations:
    {{- include "iiidevops.annotations" . | nindent 4 }}
    iiidevops.org/type: db-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
      annotations:
        {{- include "iiidevops.annotations" . | nindent 8 }}
        iiidevops.org/type: db-server
    spec:
      #backoffLimit: 2
      containers:
        - name: {{ .Values.db.type }}
          imagePullPolicy: IfNotPresent
        {{- if eq .Values.db.type "mysql" }}
          image: "{{ .Values.harbor.host }}/dockerhub/bitnami/mysql:{{ .Values.db.tag }}"
        {{- else if eq .Values.db.type "mariadb" }}
          image: "{{ .Values.harbor.host }}/dockerhub/bitnami/mariadb:{{ .Values.db.tag }}"
        {{- else if eq .Values.db.type "postgresql" }}
          image: "{{ .Values.harbor.host }}/dockerhub/bitnami/postgresql:{{ .Values.db.tag }}"
        {{- else if eq .Values.db.type "mongodb" }}
          image: "{{ .Values.harbor.host }}/dockerhub/bitnami/mongodb:{{ .Values.db.tag }}"
        {{- end }}
          ports:
            - name: db
            {{- if eq .Values.db.type "mysql" }}
              containerPort: 3306
            {{- else if eq .Values.db.type "mariadb" }}
              containerPort: 3306
            {{- else if eq .Values.db.type "postgresql" }}
              containerPort: 5432
            {{- else if eq .Values.db.type "mongodb" }}
              containerPort: 27017
            {{- end }}
              protocol: TCP
        {{- if eq .Values.db.type "postgresql" }}  
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U {{ .Values.db.username }} -d "dbname={{ .Values.db.name }}" -h 127.0.0.1 -p 5432
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - exec pg_isready -U {{ .Values.db.username }} -d "dbname={{ .Values.db.name }}" -h 127.0.0.1 -p 5432
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
        {{- end }}
          env:
        {{- if eq .Values.db.type "mysql" }}
          - name: MYSQL_ROOT_USER
            value: {{ .Values.db.username }}
          - name: MYSQL_ROOT_PASSWORD
            value: {{ .Values.db.password }}
          - name: MYSQL_DATABASE
            value: {{ .Values.db.name }}
        {{- else if eq .Values.db.type "mariadb" }}
          - name: MARIADB_ROOT_USER
            value: {{ .Values.db.username }}
          - name: MARIADB_ROOT_PASSWORD
            value: {{ .Values.db.password }}
          - name: MARIADB_DATABASE
            value: {{ .Values.db.name }}
        {{- else if eq .Values.db.type "postgresql" }}
          - name: POSTGRESQL_USERNAME
            value: {{ .Values.db.username }}
          - name: POSTGRESQL_PASSWORD
            value: {{ .Values.db.password }}
          - name: POSTGRESQL_DATABASE
            value: {{ .Values.db.name }}
        {{- else if eq .Values.db.type "mongodb" }}
          - name: MONGODB_ROOT_PASSWORD
            value: {{ .Values.db.password }}
          - name: MONGODB_USERNAME
            value: {{ .Values.db.username }}
          - name: MONGODB_PASSWORD
            value: {{ .Values.db.password }}
          - name: MONGODB_DATABASE
            value: {{ .Values.db.name }}
        {{- end }}
        # MongoDB掛載會自動將全部東西匯入(導致異常, 目前版本尚未確認)
        {{- if not (eq .Values.db.type "mongodb") }}
          volumeMounts:
            - mountPath: /docker-entrypoint-initdb.d
              name: initdb
        {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      # 自動將資料庫所需匯入的表單匯入到資料庫
      initContainers:
        - name: "clone-repo-{{ .Values.git.repoName }}-{{ include "numericSafe" .Values.git.branch }}-{{ include "numericSafe" .Values.git.commitID }}"
          image: {{ .Values.harbor.host }}/dockerhub/alpine/git
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
          args:
            - >-
              cd /initdb-data;
              export se="//";
              export url="${git_url/$se*/$se}${git_username}:${git_token}@${git_url/*$se}";
              git clone --branch ${git_branch} ${url} .;
              rm -rf .git app iiidevops;
              chmod -R 777 .;
          env:
            - name: git_url
              value: {{ .Values.git.url }}
            - name: git_branch
              value: {{ include "numericSafe" .Values.git.branch | quote }}
            - name: git_token
              valueFrom:
                secretKeyRef:
                  name: gitlab-bot
                  key: git-token
            # nexus username = gitlab username of BOT to clone
            - name: git_username
              valueFrom:
                secretKeyRef:
                  name: nexus-bot
                  key: username
          volumeMounts:
            - mountPath: /initdb-data
              name: initdb
      volumes:
        - name: initdb
          emptyDir: {}
